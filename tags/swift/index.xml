<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift on Memo</title>
    <link>https://6rats.github.io/tags/swift/</link>
    <description>Recent content in Swift on Memo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 11 Sep 2020 09:41:29 +0900</lastBuildDate>
    
	<atom:link href="https://6rats.github.io/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PropertyWrappersの基本</title>
      <link>https://6rats.github.io/post/swift_propertywrapper/</link>
      <pubDate>Fri, 11 Sep 2020 09:41:29 +0900</pubDate>
      
      <guid>https://6rats.github.io/post/swift_propertywrapper/</guid>
      <description>Swiftの公式ドキュメント の抜粋
@propertyWrapper struct TwelveOrLess { private var number: Int init() { self.number = 0 } var wrappedValue: Int { get { return number } set { number = min(newValue, 12) } } } struct SmallRectangle { @TwelveOrLess var height: Int @TwelveOrLess var width: Int } var rectangle = SmallRectangle() rectangle.height = 10 print(rectangle.height) rectangle.height = 30 print(rectangle.height) PropertyWrapper(@TwelveOrLess)を使わないでSmallRectangleを定義しないとなると下記
struct SmallRectangle { private var _height = TwelveOrLess() private var _width = TwelveOrLess() var height: Int { get { return _height.</description>
    </item>
    
    <item>
      <title>ObservableObjectと@Published</title>
      <link>https://6rats.github.io/post/swift_observableobject/</link>
      <pubDate>Fri, 11 Sep 2020 09:36:01 +0900</pubDate>
      
      <guid>https://6rats.github.io/post/swift_observableobject/</guid>
      <description>import SwiftUI import Combine class Contact: ObservableObject { var name: String @Published var age: Int init(name: String, age: Int) { self.name = name self.age = age } func haveBirthday() -&amp;gt; Int { age += 1 return age } func changeName() { name = &amp;quot;Changed!&amp;quot; } } let john = Contact(name: &amp;quot;MyName&amp;quot;, age: 10) var cancellable = john.objectWillChange .sink { _ in print(john.age) print(john.name) } john.haveBirthday() john.changeName()  ageは@PublishedになっているのでobjectWillChangeは流れてくる nameは@PublishedつけてないのでobjectWillChangeは流れない  </description>
    </item>
    
    <item>
      <title>Spacer</title>
      <link>https://6rats.github.io/post/swiftui_spacer/</link>
      <pubDate>Wed, 09 Sep 2020 14:42:40 +0900</pubDate>
      
      <guid>https://6rats.github.io/post/swiftui_spacer/</guid>
      <description>固定サイズの空白を作る Spacer().frame(height: 40) Viewを寄せる HStack { Text(&amp;quot;左に寄る&amp;quot;) Spacer() } 上下の場合はVStackでやれる。とりあえず寄るけどもっとマシな方法ありそう。
Spacerを使うときの極めてふわっとした感覚的なイメージ そこに置くと自分のスペースをできる限り広く確保しようとする、そんな挙動をする</description>
    </item>
    
  </channel>
</rss>